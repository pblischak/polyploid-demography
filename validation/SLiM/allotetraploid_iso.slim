// Paul Blischak, 28 September 2020: allotetraploidy

/*
	Allotetraploidy:

	This is a simple model of an allotetraploid.  To do this, we have to:
	(1) give each individual a tag indicating if it will eventually be in subgnome one or two.
	(2) After burn-in, we artificially "split" the population into two using the tags assigned
			to individuals previously and only allow them to cross with individuals with the same
			subgenome tag (one or two).
	(3) To get the SFS, we randomly sample individuals from subgenome one and two and then
			combine into a single spectrum.
*/

initialize() {
	setSeed(rdunif(1, 0, asInteger(2^60) - 1)+asInteger(rep));

	defineConstant("K", 1000);
	defineConstant("L", 1e6); // total bp length

	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;

	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L - 1);
	initializeMutationRate(1.25e-6);
	initializeRecombinationRate(1.25e-6);
}

1 {
	sim.addSubpop("p1", K);
	sim.rescheduleScriptBlock(
		s1,
		asInteger(20000 + 2000 * asFloat(T1)),
		asInteger(20000 + 2000 * asFloat(T1))
	);
}

20000 {
	sim.addSubpopSplit("p2", K, p1);
}

20000: late() {
	catn(sim.generation+"\t"+p1.individualCount+"\t"+p2.individualCount);
}

s1 10 late() {
	/*
		Here we go through and sample 20 chromosomes each from the two populations that make
		up the allotetraploid. We then get the SFS using the following steps:

			1. Find all positions that have mutations across both populations.
			2. Tabulate the number of individuals with the mutation across all possible positions.
			3. Use the mutation counts to build the SFS.
	*/
	for(i in 1:50){
		// Sample individuals from pop1 with tag 1
		pop1_ind = sample(p1.individuals, 10, T);

		// Get the genomes of the sampled individuals
		pop1_g   = sapply(pop1_ind, "applyValue.genomes;");

		// Sample individuals from pop1 with tag 2
		pop2_ind = sample(p2.individuals, 10, T);

		// Get the genomes of the pop2 individuals
		pop2_g   = sapply(pop2_ind, "applyValue.genomes;");

		// Find where the mutations are on the sampled chromosomes
		// and sort by position for convenience
		pop1_m = sortBy(unique(pop1_g.mutations), "position");
		pop2_m = sortBy(unique(pop2_g.mutations), "position");

		// Take the union of mutated positions to get all
		// places where a mutation happened in both populations.
		m = setUnion(pop1_m,pop2_m);
		print(size(m));

		// make a vector of 0's to store the number of individuals
		// with mutations at each position in both populations
		pop1_mutSum = rep(0,size(m));
		pop2_mutSum = rep(0,size(m));

		// initialize the SFS
		sfs = rep(0,41);

		// Loop through each genome/chromosome and see if it has a mutations
		// at a given position. If it does, add it to the count
		// (this is adding vectors).
		for(genome in pop1_g){
			hasMuts = (match(m, genome.mutations) >= 0);
			pop1_mutSum = pop1_mutSum + asInteger(hasMuts);
		}
		for(genome in pop2_g){
			hasMuts = (match(m, genome.mutations) >= 0);
			pop2_mutSum = pop2_mutSum + asInteger(hasMuts);
		}

		// Add the mutation count vectors for pop1 and pop2 together
		mutSum = pop1_mutSum + pop2_mutSum;

		// Get the SFS by tabulating how often we see mutations with
		// different frequencies.
		for(mut in mutSum){
			sfs[mut] = sfs[mut] + 1;
		}

		// Write the file in dadi format
		writeFile(
			"allotetraploid_iso_"+T1+"_"+rep+"_"+i+".fs",
			"41 unfolded\n"+paste(sfs, " ") + "\n"
		);
	}
}
