// set up a simple neutral simulation
// theta (4 * Na * mu * L) = 10^4
// L = 10^6 Mb
// Na = 10^3
// mu = 10,000 / (4 * 10^3 * 10^6) = 1 / 4e5
initialize() {
	setwd(".");

	//defineConstant("Fis", 0.1); // set F
	initializeMutationRate(2.5e-6);

	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);

	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);

	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, 999999);
	initializeRecombinationRate(2.5e-6);
}

1 {
	sim.addSubpop("p1", 1000);
}

10000 {
	sim.addSubpopSplit("p2", 1000, p1);
	p1.setMigrationRates(p2, 0.5);
	p2.setMigrationRates(p1, 0.5);
}

15000 late() {
	pop1_g = sample(p1.genomes, 20, T);
	pop2_g = sample(p2.genomes, 20, T);
	pop1_m = sortBy(unique(pop1_g.mutations), "position");
	pop2_m = sortBy(unique(pop2_g.mutations), "position");
	m = setUnion(pop1_m,pop2_m);
	print(size(m));
	pop1_mutSum = rep(0,size(m));
	pop2_mutSum = rep(0,size(m));
	sfs = rep(0,41);
	for(genome in pop1_g){
		hasMuts = (match(m, genome.mutations) >= 0);
		pop1_mutSum = pop1_mutSum + asInteger(hasMuts);
	}
	for(genome in pop2_g){
		hasMuts = (match(m, genome.mutations) >= 0);
		pop2_mutSum = pop2_mutSum + asInteger(hasMuts);
	}
	mutSum = pop1_mutSum + pop2_mutSum;

	for(mut in mutSum){
		sfs[mut] = sfs[mut] + 1;
	}
	print(sfs);

	writeFile("autopolyploid_"+Rep+".fs", "41 unfolded\n" + paste(sfs, " "));
}
